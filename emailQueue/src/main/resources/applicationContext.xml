<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd">

    <context:component-scan base-package="com.donahue" />

    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="messageConverter"  ref="messageConverter"/>
    </bean>

    <bean id="messageConverter" class="com.donahue.entity.EmailMessageConverter"/>

    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616"/>
        <property name="redeliveryPolicy" ref="redeliveryPolicy"/>
    </bean>

    <!--配置投递策略-->
    <!-- Wait 15 seconds first re-delivery, then 45, 135 seconds -->
    <bean id="redeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
        <property name="backOffMultiplier" value="3" />
        <property name="initialRedeliveryDelay" value="15000" />
        <property name="maximumRedeliveries" value="2" />
        <property name="queue" value="*" />
        <property name="redeliveryDelay" value="4500" />
        <property name="useExponentialBackOff" value="true" />
    </bean>
    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="targetConnectionFactory"/>

    </bean>

    <!--这个是队列目的地-->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>queue</value>
        </constructor-arg>
    </bean>
    <!-- 消息监听器 -->
    <bean id="consumerMessageListener" class="com.donahue.listener.ConsumerListener1"/>
    <!-- 消息监听容器 -->
    <bean id="messageListenerAdapterContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destination" ref="queueDestination" />
        <property name="messageListener" ref="messageListenerAdapter" />
        <property name="sessionTransacted" value="true"/>  <!--开启事务支持-->
        <!--如果消息的接收速率,大于消息处理的速率时,可以采取线程池方式-->
        <property name="taskExecutor" ref="queueMessageExecutor"/>
        <property name="concurrentConsumers" value="1"/>
        <!--1..5个consumers，当-->
        <property name="concurrency" value="1-5"/>

    </bean>
    <bean id="queueMessageExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="2" />
        <property name="maxPoolSize" value="5" />
        <property name="daemon" value="true" />
        <property name="keepAliveSeconds" value="120" />
    </bean>

    <!-- 消息监听适配器 -->
    <bean id="messageListenerAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
        <property name="delegate">
            <bean class="com.donahue.listener.EmailListener"/>
        </property>
        <property name="defaultListenerMethod" value="onReceiveMessage"/>
    </bean>


    <!--测试消息接收成功之后的反馈，我们可以在发送成功之后做相关的逻辑-->
    <!-- 用于测试消息回复的 -->
    <bean id="responseQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>responseQueue</value>
        </constructor-arg>
    </bean>
    <!-- 消息反馈适配器 -->
    <bean id="messageResponseAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
        <property name="delegate">
            <bean class="com.donahue.listener.EmailResponseListener"/>
        </property>
        <property name="defaultListenerMethod" value="onReceiveMessage"/>
    </bean>

    <!-- responseQueue对应的监听器 -->
    <bean id="responseQueueListener" class="com.donahue.listener.EmailResponseListener"/>

    <!-- responseQueue对应的监听容器 -->
    <bean id="responseQueueMessageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="destination" ref="responseQueue"/>
        <property name="messageListener" ref="messageResponseAdapter"/>
    </bean>

</beans>
